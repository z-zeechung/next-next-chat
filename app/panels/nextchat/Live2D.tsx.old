import { useEffect, useMemo, useRef, useState } from "react"
import * as PIXI from "pixi.js";
import { v4 as uuidv4 } from 'uuid';
import React from "react";

window.PIXI = PIXI;

function loadScript(src: string): Promise<void> {
  return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.onload = ()=>resolve();
      script.onerror = reject;
      document.head.append(script);
  });
}

export let live2dModel: any = null

function _Live2DCanvas() {

  function calcScale(srcW, srcH, tarW, tarH){
    return Math.min(
      tarW / srcW,
      tarH / srcH
    )
  }

  const canvasRef = useRef(null)
  useEffect(() => {
    loadScript("/live2d.min.js").then(()=>{
      loadScript("/live2dcubismcore.min.js").then(async ()=>{
        const Live2DModel = (await import('pixi-live2d-display')).Live2DModel
        live2dModel = await Live2DModel.from('https://model.oml2d.com/HK416-1-normal/model.json');
        const scale = calcScale(live2dModel.width, live2dModel.height, window.innerWidth, window.innerHeight/2)
        live2dModel.width *= scale
        live2dModel.height *= scale
        const canvas = canvasRef.current
        if(!canvas) {return}
        const app = new PIXI.Application({
          view: canvas,
          backgroundAlpha: 0,
          width: live2dModel.width,
          height: live2dModel.height
        });
        app.stage.addChild(live2dModel);
      })
    })
    return ()=>{
      live2dModel = null
    }
  })
  return <canvas ref={canvasRef}/>
}

const Live2DCanvas = React.memo(_Live2DCanvas)

export function Live2D(){

  return <Live2DCanvas/>
}